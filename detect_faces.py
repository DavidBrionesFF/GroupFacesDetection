# -*- coding: utf-8 -*-
"""deteccion-rostros-opencv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fHvCEbjTDIvXkmNnJNjcYiIzV8v4AgtA
"""
import cv2
from skimage.io import imread, imshow, imsave
from skimage.color import rgb2gray
from skimage.transform import resize
import numpy as np

face_cascade = cv2.CascadeClassifier(
    'haarcascade_frontalface_default.xml')

eye_cascade = cv2.CascadeClassifier('haarcascade_eye.xml')

video = cv2.VideoCapture(0)

i = 0

while video.isOpened():
    ret, frame = video.read()
    if frame is not None:
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        faces = face_cascade.detectMultiScale(gray, 1.3, 5)

        for (x, y, w, h) in faces:
            cv2.rectangle(frame, (x, y), (x + w, y + h), (255, 0, 0), 2)
            roi_gray = gray[y:y + h, x:x + w]
            roi_color = frame[y:y + h, x:x + w]

            imsave('img/' + str(i) + ".jpg", resize(roi_gray, output_shape=[250, 250]))

            i += 1

            eyes = eye_cascade.detectMultiScale(roi_gray)
            for (ex, ey, ew, eh) in eyes:
                cv2.rectangle(roi_color, (ex, ey), (ex + ew, ey + eh), (0, 255, 0), 2)
        cv2.imshow('Video', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

video.release()
cv2.destroyAllWindows()

import os

files = os.listdir('img/')
imgs = []

for file in files:
    imgs.append(imread("img/" + str(file)))

